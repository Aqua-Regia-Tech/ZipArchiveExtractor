/*
 * ZipExtractor.java
 *
 * Created on 23 November, 2011, 5:25 PM
 */

package com.artech.extractor;

/**
 *
 * @author  RISHI
 */
import java.util.zip.*;
import java.awt.*;
import java.io.*;
import javax.swing.*;
public class ZipExtractor extends javax.swing.JFrame {
    private String lastDir = "";
    private String zipname="";
    private int i=0;
    /** Creates new form ZipExtractor */
    public ZipExtractor() {
        initComponents();
    }
public void scanZipFile()
   {  filelist.removeAll();
      try
      {  
         ZipInputStream zin = new ZipInputStream(new FileInputStream(zipname));
         ZipEntry entry;
         while ((entry = zin.getNextEntry()) != null)
         {  
            filelist.add(entry.getName());
            zin.closeEntry();
         }
         zin.close();
      }
      catch(IOException e)
      {
      }
      Filest.setText(""+filelist.countItems());
      Filenamet.setText(zipname);
   }
public void archive()
{
    if(Filenamet.getText()!=null)
    {
    zipname=Filenamet.getText();
    doZip(filelist,zipname);
    i=0;
    status.setText("Status:Archiving completed.");
    }
    else
    {
        status.setText("Status:Error occurred...Enter the zipfile name.");
    }
}
public void extract()
{
    scanZipFile();
    try
    {
        File inputFile=new File(zipname);
        ZipFile zf=new ZipFile(inputFile);
        ZipInputStream zin = new ZipInputStream(new FileInputStream(zipname));
         ZipEntry entry;
         while ((entry = zin.getNextEntry()) != null)
         {  
             File file=new File(entry.getName());
             if(entry.isDirectory())
             {
                 file.mkdirs();
             }
             else
             {
                 InputStream inputStream=zf.getInputStream(entry);
                 write(inputStream,file);
             }
             zin.closeEntry();
             status.setText("Status:Extracting...");
         }
         zin.close();
    }
    catch(IOException io)
    {
        status.setText("Status:Error in extracting");
    }
    status.setText("Status:Extraction completed.");
}
public void doZip(List fileList,String zipfilename) {
    try
    {
    int data;
    String filename;
    ZipOutputStream s= new ZipOutputStream((OutputStream)new FileOutputStream(zipfilename));
    byte[] buf = new byte[1024];
    while(i<fileList.countItems())
    {
            filename=fileList.getItem(i);
            FileInputStream fis = new FileInputStream(filename);
            fis.read(buf,0,buf.length);
            s.setLevel(6);
            ZipEntry entry = new ZipEntry(filename);
            entry.setSize((long)buf.length);
            s.putNextEntry(entry);
            while((data=fis.read(buf, 0,buf.length))!=-1)
            {
            s.write(buf, 0, buf.length);
            }
            s.closeEntry();
            i++;
    }
            s.finish();
            s.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    
    }
public static void write(InputStream inputStream, File fileToWrite) throws IOException
    {        
            BufferedInputStream buffInputStream = new BufferedInputStream( inputStream );
            FileOutputStream fos = new FileOutputStream( fileToWrite );
            BufferedOutputStream bos = new BufferedOutputStream( fos );

            // write bytes
            int byteData;
            byte[] buf=new byte[1024];
            while( ( byteData = buffInputStream.read(buf) ) != -1 )
            {
                 bos.write(buf,0,byteData);
            }

            // close all the open streams
            bos.close();
            fos.close();
            buffInputStream.close();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ToolBar = new javax.swing.JToolBar();
        BAddFiles = new javax.swing.JButton();
        BOpen = new javax.swing.JButton();
        BArchive = new javax.swing.JButton();
        BExtract = new javax.swing.JButton();
        BRemove = new javax.swing.JButton();
        BAbout = new javax.swing.JButton();
        Filenamel = new javax.swing.JLabel();
        Filenamet = new javax.swing.JTextField();
        Filesl = new javax.swing.JLabel();
        Filest = new javax.swing.JTextField();
        status = new javax.swing.JLabel();
        filelist = new java.awt.List();
        MenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        AddFiles = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Tools = new javax.swing.JMenu();
        Archive = new javax.swing.JMenuItem();
        Extract = new javax.swing.JMenuItem();
        Remove = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        Helps = new javax.swing.JMenuItem();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zip Archive Extractor");
        setMinimumSize(new java.awt.Dimension(600, 500));
        setName("Zip Archive Extractor"); // NOI18N

        ToolBar.setRollover(true);

        BAddFiles.setText("Add Files");
        BAddFiles.setFocusable(false);
        BAddFiles.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BAddFiles.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BAddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAddFilesActionPerformed(evt);
            }
        });
        ToolBar.add(BAddFiles);

        BOpen.setText("Open");
        BOpen.setFocusable(false);
        BOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOpenActionPerformed(evt);
            }
        });
        ToolBar.add(BOpen);

        BArchive.setText("Archive");
        BArchive.setFocusable(false);
        BArchive.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BArchive.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BArchiveActionPerformed(evt);
            }
        });
        ToolBar.add(BArchive);

        BExtract.setText("Extract");
        BExtract.setFocusable(false);
        BExtract.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BExtract.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BExtractActionPerformed(evt);
            }
        });
        ToolBar.add(BExtract);

        BRemove.setText("Remove");
        BRemove.setFocusable(false);
        BRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRemoveActionPerformed(evt);
            }
        });
        ToolBar.add(BRemove);

        BAbout.setText("About");
        BAbout.setFocusable(false);
        BAbout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BAbout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAboutActionPerformed(evt);
            }
        });
        ToolBar.add(BAbout);

        Filenamel.setText("File Name:");

        Filesl.setText("No.of Files:");

        status.setText("Status:Idle");

        filelist.setMultipleMode(true);

        File.setText("File");

        AddFiles.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        AddFiles.setText("Add Files");
        AddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFilesActionPerformed(evt);
            }
        });
        File.add(AddFiles);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        MenuBar.add(File);

        Tools.setText("Tools");

        Archive.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        Archive.setText("Archive");
        Archive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchiveActionPerformed(evt);
            }
        });
        Tools.add(Archive);

        Extract.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        Extract.setText("Extract");
        Extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtractActionPerformed(evt);
            }
        });
        Tools.add(Extract);

        Remove.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        Tools.add(Remove);

        MenuBar.add(Tools);

        Help.setText("Help");

        Helps.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        Helps.setText("Help");
        Helps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpsActionPerformed(evt);
            }
        });
        Help.add(Helps);

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        MenuBar.add(Help);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Filenamel)
                .addGap(18, 18, 18)
                .addComponent(Filenamet, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(Filesl)
                .addGap(18, 18, 18)
                .addComponent(Filest, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(filelist, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Filenamel)
                    .addComponent(Filenamet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filesl)
                    .addComponent(Filest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filelist, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void AddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFilesActionPerformed
// TODO add your handling code here:
         FileDialog d = new FileDialog(this,"Add files", FileDialog.LOAD);
         d.setDirectory(lastDir);
         d.show();
         String f = d.getFile();
         lastDir = d.getDirectory();
         if(f!=null)
         {
         String s=lastDir+f;
         filelist.add(s);
         Filest.setText(""+filelist.countItems());
         Filenamet.setText("");
         }
}//GEN-LAST:event_AddFilesActionPerformed

private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
// TODO add your handling code here:
         FileDialog d = new FileDialog(this,"Open zip file", FileDialog.LOAD);
         d.setFile("*.zip");
         d.setDirectory(lastDir);
         d.show();
         String f = d.getFile();
         lastDir = d.getDirectory();
         if (f != null)
         {  zipname = lastDir + f;
            scanZipFile();            
         }
}//GEN-LAST:event_OpenActionPerformed

private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
// TODO add your handling code here:
    System.exit(0);
}//GEN-LAST:event_ExitActionPerformed

private void ArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchiveActionPerformed
// TODO add your handling code here:
    archive();
}//GEN-LAST:event_ArchiveActionPerformed

private void ExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractActionPerformed
// TODO add your handling code here:
    extract();
}//GEN-LAST:event_ExtractActionPerformed

private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
// TODO add your handling code here:
    int r=filelist.getSelectedIndex();
    filelist.remove(r);
    Filest.setText(""+filelist.countItems());
}//GEN-LAST:event_RemoveActionPerformed

private void HelpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpsActionPerformed
// TODO add your handling code here:
    JFrame f=new JFrame("Help");
    f.show();
    f.setSize(400, 300);
    JTextArea t=new JTextArea("Java ZipArchiveExtractor-Help\n");
    t.setEditable(false);
    f.add(t);
}//GEN-LAST:event_HelpsActionPerformed

private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
// TODO add your handling code here:
    JFrame f=new JFrame("About");
    f.show();
    f.setSize(400, 300);
    JTextArea t=new JTextArea("CSE-B\nJava ZipArchiveExtractor\nVersion 1.0.0\nDesigners:\nJ.Varun Jeeva\nT.Sathish kumar\nV.Rishikesan");
    t.setEditable(false);
    f.add(t);
}//GEN-LAST:event_AboutActionPerformed

private void BAddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAddFilesActionPerformed
// TODO add your handling code here:
         FileDialog d = new FileDialog(this,"Add files", FileDialog.LOAD);
         d.setDirectory(lastDir);
         d.show();
         String f = d.getFile();
         lastDir = d.getDirectory();
         if(f!=null)
         {
         String s=lastDir+f;
         filelist.add(s);
         Filest.setText(""+filelist.countItems());
         Filenamet.setText("");
         }
}//GEN-LAST:event_BAddFilesActionPerformed

private void BOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOpenActionPerformed
// TODO add your handling code here:
    FileDialog d = new FileDialog(this,"Open zip file", FileDialog.LOAD);
         d.setFile("*.zip");
         d.setDirectory(lastDir);
         d.show();
         String f = d.getFile();
         lastDir = d.getDirectory();
         if (f != null)
         {  zipname = lastDir + f;
            scanZipFile();            
         }
}//GEN-LAST:event_BOpenActionPerformed

private void BArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BArchiveActionPerformed
// TODO add your handling code here:
    archive();
}//GEN-LAST:event_BArchiveActionPerformed

private void BExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BExtractActionPerformed
// TODO add your handling code here:
    extract();
}//GEN-LAST:event_BExtractActionPerformed

private void BRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRemoveActionPerformed
// TODO add your handling code here:
    int r=filelist.getSelectedIndex();
    filelist.remove(r);
    Filest.setText(""+filelist.countItems());
}//GEN-LAST:event_BRemoveActionPerformed

private void BAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAboutActionPerformed
// TODO add your handling code here:
    JFrame f=new JFrame("About");
    f.show();
    f.setSize(400, 300);
    JTextArea t=new JTextArea("CSE-B\nJava ZipArchiveExtractor\nVersion 1.0.0\nDesigners:\nJ.Varun Jeeva\nT.Sathish kumar\nV.Rishikesan");
    t.setEditable(false);
    f.add(t);
}//GEN-LAST:event_BAboutActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZipExtractor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem AddFiles;
    private javax.swing.JMenuItem Archive;
    private javax.swing.JButton BAbout;
    private javax.swing.JButton BAddFiles;
    private javax.swing.JButton BArchive;
    private javax.swing.JButton BExtract;
    private javax.swing.JButton BOpen;
    private javax.swing.JButton BRemove;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Extract;
    private javax.swing.JMenu File;
    private javax.swing.JLabel Filenamel;
    private javax.swing.JTextField Filenamet;
    private javax.swing.JLabel Filesl;
    private javax.swing.JTextField Filest;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Helps;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Remove;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JMenu Tools;
    private java.awt.List filelist;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables

}
